#!/usr/bin/env python
"""Runs the project initialization."""

import argparse
import itertools
import re
import shutil
import subprocess
import sys
from pathlib import Path
from typing import Callable, Literal, cast, get_args

# Regex matching valid Python module names.
NAME_REGEX = re.compile(r"^[a-zA-Z_][a-zA-Z0-9_]*$")

PROJECT_FILES = ("setup.py", "requirements.txt", "requirements-dev.txt", "README.md")

ProjectType = Literal["vanilla", "cpp"]


def show_success(msg: str) -> None:
    print(f"\033[1;32m{msg}\033[0m")


def show_dry_run(msg: str, grey: bool = False) -> None:
    if grey:
        print(f"\033[1;30m{msg}\033[0m")
    else:
        print(f"\033[1;33m{msg}\033[0m")


def show_warning(msg: str, bold: bool = False) -> None:
    print(f"\033[{'1;' if bold else ''}31m{msg}\033[0m")


def is_valid_name(name: str) -> bool:
    if NAME_REGEX.match(name) is None:
        show_warning(f"'{name}' is not a valid project name")
        return False
    return True


def is_valid_description(description: str) -> bool:
    return True


def is_valid_author(author: str) -> bool:
    return True


def read_input(
    prompt: str,
    pre: str | None = None,
    post: str | None = None,
    success_func: Callable[[str], bool] = lambda _: True,
) -> str:
    prompt_str = f"{pre}\033[36m{prompt}\033[0m{post} "
    s = input(prompt_str).strip()
    if s.lower() in ("q", "quit"):
        show_warning("Quitting")
        sys.exit(0)
    while not success_func(s):
        s = input(prompt_str).strip()
        if s.lower() in ("q", "quit"):
            show_warning("Quitting")
            sys.exit(0)
    return s


def read_yes_no(prompt: str, pre: str | None = None) -> bool:
    return read_input(prompt, pre, "? [y/n]", lambda s: s.lower() in ("y", "n")).lower() == "y"


def read_project_type() -> ProjectType:
    project_type = read_input(
        "create",
        "What type of project do you want to ",
        "?\n" + "\n".join(f"- {t}" for t in get_args(ProjectType)) + "\n>",
        lambda s: s in get_args(ProjectType),
    )
    return cast(ProjectType, project_type)


def rename_project_files(project_type: ProjectType, dry_run: bool) -> None:
    root_dir = Path(__file__).parent.resolve()

    # Moves files to the correct location.
    for file_name in PROJECT_FILES:
        from_name = (root_dir / "project_files" / project_type / file_name).resolve()
        to_name = root_dir / file_name
        if not dry_run and to_name.exists():
            to_name.unlink()
        if from_name.exists():
            if dry_run:
                show_dry_run(f"Renaming {file_name}")
                # Creates a temporary symlink.
                if not to_name.exists():
                    to_name.symlink_to(from_name)
            else:
                from_name.rename(to_name)
        else:
            show_warning(f"Can't find {file_name}")

    # Removes the project files directory.
    project_files_dir = root_dir / "project_files"
    if project_files_dir.exists():
        if dry_run:
            show_dry_run("Removing project_files directory")
        else:
            shutil.rmtree(project_files_dir)
    else:
        show_warning("Can't find project_files directory")

    # Removes .github/workflows/core-checks.yml and replaces with .github/workflows/core-checks.yml.project
    core_checks = root_dir / ".github" / "workflows" / "core-checks.yml"
    core_checks_project = root_dir / ".github" / "workflows" / "core-checks.yml.project"
    if core_checks.exists():
        if dry_run:
            show_dry_run("Removing core-checks.yml")
        else:
            core_checks.unlink()
    else:
        show_warning("Can't find core-checks.yml")

    if core_checks_project.exists():
        if dry_run:
            show_dry_run("Renaming core-checks.yml.project to core-checks.yml")
        else:
            core_checks_project.rename(core_checks)
    else:
        show_warning("Can't find core-checks.yml.project")

    # Removes `project/cpp` subdirectory and `tests/test_cpp_extension.py` if project_type != "cpp".
    if project_type != "cpp":
        cpp_dir = root_dir / "project" / "cpp"
        if cpp_dir.exists():
            if dry_run:
                show_dry_run("Removing C++ subdirectory")
            else:
                shutil.rmtree(cpp_dir)
        else:
            show_warning("Can't find C++ subdirectory")

        test_cpp_extension = root_dir / "tests" / "test_cpp_extension.py"
        if test_cpp_extension.exists():
            if dry_run:
                show_dry_run("Removing C++ test")
            else:
                test_cpp_extension.unlink()
        else:
            show_warning("Can't find C++ test")


def update_project_name(from_str: str, to_str: str, file_path: Path, dry_run: bool) -> None:
    if file_path.exists():
        if dry_run:
            show_dry_run(f"Updating project name in {file_path}", grey=True)
        else:
            with open(file_path, "r", encoding="utf-8") as f:
                file_content = f.read()
            file_content = file_content.replace(from_str, to_str)
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(file_content)
    else:
        show_warning(f"Can't find {file_path}")


def rename_project(
    new_name: str,
    new_description: str,
    new_author: str,
    dry_run: bool,
) -> None:
    # Renames project root directory.
    root_dir = Path(__file__).parent.resolve()
    if (project_root := root_dir / "project").exists():
        if dry_run:
            show_dry_run(f"Renaming project root to '{new_name}'")
        else:
            if (new_project_root := root_dir / new_name).exists():
                shutil.rmtree(new_project_root)
            project_root.rename(new_project_root)

        # Updates project imports.
        test_root = root_dir / "tests"
        for py_file in itertools.chain(new_project_root.glob("**/*.py"), test_root.glob("**/*.py")):
            update_project_name("import project", f"import {new_name}", py_file, dry_run)
            update_project_name("from project", f"from {new_name}", py_file, dry_run)

    else:
        show_warning(f"Can't find project root in {project_root}")

    # Replaces `project.scripts.cli` with `{new_name}.scripts.cli` in `setup.cfg`.
    setup_cfg = root_dir / "setup.cfg"
    update_project_name("project.scripts.cli", f"{new_name}.scripts.cli", setup_cfg, dry_run)

    # Parses remote URL from git config.
    try:
        new_url = subprocess.check_output(["git", "config", "--get", "remote.origin.url"], cwd=root_dir).decode()
        new_url = re.sub(r"\s+$", "", new_url.strip())
        if (github_repo_match := re.match(r"^git@github.com:(.+).git$", new_url)) is not None:
            new_url = f"https://github.com/{github_repo_match.group(1)}"

    except subprocess.CalledProcessError:
        new_url = ""

    # Replaces keywords in `setup.py`.
    setup_py = root_dir / "setup.py"
    update_project_name("<name>", new_name, setup_py, dry_run)
    update_project_name("<description>", new_description, setup_py, dry_run)
    update_project_name("<author>", new_author, setup_py, dry_run)
    update_project_name("<url>", new_url, setup_py, dry_run)

    # Replaces known-first-party = ["project", "tests"] in `pyproject.toml``.
    pyproject_toml = root_dir / "pyproject.toml"
    update_project_name(
        'known-first-party = ["project", "tests"]',
        f'known-first-party = ["{new_name}", "tests"]',
        pyproject_toml,
        dry_run,
    )

    # Replaces {name} and {description} in `README.md`.
    readme_md = root_dir / "README.md"
    update_project_name("<name>", new_name, readme_md, dry_run)
    update_project_name("<description>", new_description, readme_md, dry_run)


def remove_init(remove: bool, dry_run: bool) -> None:
    if not remove:
        return

    init_path = Path(__file__).resolve().relative_to(Path.cwd())
    if dry_run:
        show_dry_run(f"Removing {init_path}")
    else:
        init_path.unlink()


def commit_changes(dry_run: bool) -> None:
    if dry_run:
        return

    wd = Path(__file__).parent.resolve()
    subprocess.run(["git", "add", "."], cwd=wd)
    subprocess.run(["git", "commit", "-m", "Initialize project"], cwd=wd)


def remove_dryrun_symlinks(dry_run: bool) -> None:
    if not dry_run:
        return

    for file_name in PROJECT_FILES:
        setup_py_file = Path(__file__).parent.resolve() / file_name
        if setup_py_file.is_symlink():
            show_dry_run(f"Removing temporary symlink to {file_name}")
            setup_py_file.unlink()


def main() -> None:
    parser = argparse.ArgumentParser(description="Initializes a new project")
    parser.add_argument("-n", "--name", type=str, default=None, help="Project name")
    parser.add_argument("-c", "--description", type=str, default=None, help="Project description")
    parser.add_argument("-a", "--author", type=str, default=None, help="Author name")
    parser.add_argument("-p", "--project", type=str, choices=get_args(ProjectType), default=None, help="Project type")
    parser.add_argument("-r", "--remove-init", type=int, default=None, choices=[0, 1], help="Remove initialize script")
    parser.add_argument("-d", "--dry-run", default=False, action="store_true", help="Dry run")
    args = parser.parse_args()

    name = cast(str | None, args.name)
    description = cast(str | None, args.description)
    proj_type = cast(ProjectType | None, None if args.project is None else args.project)
    rm_init = None if args.remove_init is None else bool(args.remove_init)
    dry_run = cast(bool, args.dry_run)

    if name is not None and not is_valid_name(name):
        show_warning(f"Invalid project name: {name}", bold=True)
        sys.exit(1)

    rename_project_files(read_project_type() if proj_type is None else proj_type, dry_run)
    rename_project(
        read_input("project name", "New ", ":", is_valid_name) if name is None else name,
        read_input("project description", "New ", ":", is_valid_description) if description is None else description,
        read_input("author name", "New ", ":", is_valid_author) if args.author is None else args.author,
        dry_run,
    )
    remove_init(read_yes_no("initialize script", "Remove ") if rm_init is None else rm_init, dry_run)
    commit_changes(dry_run)
    remove_dryrun_symlinks(dry_run)
    show_success("Done!")


if __name__ == "__main__":
    main()
